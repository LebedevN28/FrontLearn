import { useAppDispatch, useAppSelector } from '../../6_shared/lib/hooks';
import { updateUserPointsThunk } from '../../5_entities/user/model/userThunks';
import { checkAchievements } from '../../5_entities/userAchievement/lib/checkAchievements';
import { saveUserAchievements } from '../../5_entities/userAchievement/model/userAchievementThunks';
import { updateStats, updateUserPoints } from '../../5_entities/user/model/userSlice';
import { toast } from 'react-toastify';
import type { AnswerType } from '../../5_entities/answer/model/answer.types';
import { calculatePoints } from '../../6_shared/utils/pointsCalculator';
import { addUnlockedAchievements } from '../../5_entities/userAchievement/model/userAchievementsSlice';
import type { TaskT } from '../../5_entities/task/model/types';
import type { AchievementType } from '../../5_entities/achievement/model/achievement.types';
import type { UserType } from '../../5_entities/user/model/user.types';
import type { UserStatsType } from '../../5_entities/userAchievement/model/userStats.types';
import {
  createProgressThunk,
  getTotalUserProgressThunk,
  getUserProgressByModuleThunk,
  getUserProgressByTaskThunk,
} from '../../5_entities/progress/model/progressThunks';

export const useHandleAnswer = ({
  task,
  userStats,
  thisUser,
  achievements,
}: {
  task: TaskT;
  userStats: UserStatsType;
  thisUser: UserType;
  achievements: AchievementType[];
}): ((answer: AnswerType) => Promise<void>) => {
  const dispatch = useAppDispatch();
  const unlockedAchievementIds = useAppSelector(
    (state) => state.userAchievements.unlockedAchievementsIds,
  );

  const handleAnswerClick = async (answer: AnswerType): Promise<void> => {
    // if (!thisUser || !task) {
    //   console.error('Missing user or task data.');
    //   toast.error('Unable to process the answer due to missing data.');
    //   return;
    // }

    const { id: userId } = thisUser;
    const { moduleId } = task;

    if (answer.isCorrect) {
      try {
        // –í—ã—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –æ—Ç–≤–µ—Ç
        const points = calculatePoints(task.difficulty);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await dispatch(updateUserPointsThunk({ id: userId, points }));
        dispatch(updateUserPoints({ userId, points }));
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updatedStats: UserStatsType = {
          totalAnswers: (userStats?.totalAnswers || 0) + 1,
          level: Math.floor(((userStats?.totalAnswers || 0) + 1) / 10) + 1,
        };
        await dispatch(updateStats(updatedStats));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const newAchievements = checkAchievements(achievements, updatedStats).filter(
          (achievement) => !unlockedAchievementIds.includes(achievement.id),
        );

        if (newAchievements.length > 0) {
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          newAchievements.forEach((achievement) =>
            toast.success(`üéâ –£—Ä–∞, –∞—á–∏–≤–∫–∞!: ${achievement.title}`),
          );

          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          dispatch(addUnlockedAchievements(newAchievements.map((a) => a.id)));

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          await dispatch(
            saveUserAchievements({
              userId,
              achievements: newAchievements.map((a) => a.id),
            }),
          );
        }
      } catch (error) {
        console.error('Error updating points or achievements:', error);
        toast.error('Failed to update user stats or achievements.');
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∑–∞–¥–∞—á–∏
    try {
      await dispatch(
        createProgressThunk({
          userId,
          taskId: task.id,
          gotCorrect: answer.isCorrect,
        }),
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await Promise.all([
        dispatch(getTotalUserProgressThunk(userId)),
        dispatch(getUserProgressByModuleThunk({ userId, moduleId })),
        dispatch(getUserProgressByTaskThunk({ userId, taskId: task.id })),
      ]);
    } catch (error) {
      console.error('Error creating progress:', error);
      toast.error('Failed to update progress.');
    }
  };

  return handleAnswerClick;
};
